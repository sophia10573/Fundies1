; Homework 4 - Liam Knowles and Sophia Thomas 

(require 2htdp/image)
(require 2htdp/universe)

;Exercise 1:
;Design the data necessary to represent a line in mathematics, which has no beginning and no end.
;We will consider two forms: slope-intercept (where we specify two constants, m and b,
;such that y = mx + b)
;and a vertical line (where we specify one constant, which is the x location of the line).

(define-struct lines [M B])

;A Line is one of:
; a (make-line M B)
; vertical line (X)

(define M 2)
(define M2 3)
(define B 1)
(define B2 2)
(define X 3)
(define X2 7)

(define LINE1 (make-lines M B))
(define LINE2 (make-lines M2 B2))
(define LINE3 X2)


(define (make-lines-temp line)
  (...
   (cond
     [(lines? line) (lines-M line)...(lines-B line)... ]
     [(integer? line) line])))


;Exercise 2: Consider the following data definition, inspired by the game Barrel of Monkeys:
#;(define-struct monkey [name c others])
; A MonkeyChain is a (make-monkey String String MonkeyChain)
; and represents a collection of monkeys where:
; - name is the name of this monkey
; - c is the color of this monkey
; - others is the other monkeys it is attached to
; What is the problem with this data definition? Describe your answer in a comment.
;(Hint: try defining examples of a MonkeyChain.)

; The data definition for MonkeyChain contradicts itself because it define MonkeyChain as a
; make-monkey with a parameter of MonkeyChain and the other monkeys it is attached to.

; Exercise 3

(define-struct delay [reason minutes])
; A TrainStatus is one of:
; - Integer
; - String
; - (make-delay String PosInt)
; - false
; and represents number of minutes away, a status message (e.g., "arriving"),
; minutes of delay and reason, or that the train has been cancelled
(define TRAINSTATUS1 4)
(define TRAINSTATUS2 "arriving")
(define TRAINSTATUS3 (make-delay "due to signaling error" 10))
(define TRAINSTATUS4 false)

(define (delay-temp delay)
  (...(delay-reason delay)...(delay-minutes delay)...))

; announce : Number String TrainStatus --> String
; outputs an announcement for the train.

(check-expect (announce 9 "Portland" 1) "Train 9 to Portland is 1 minute away.")
(check-expect (announce 123 "Newark" "arriving") "Train 123 to Newark is arriving.")
(check-expect (announce 82 "Philadelphia" "boarding") "Train 82 to Philadelphia is boarding.")
(check-expect (announce 76 "Chicago" (make-delay "signaling error" 10))
              "Train 76 to Chicago is delayed 10 minutes due to signaling error.")
(check-expect (announce 9348 "Boston" "cancelled") "Train 9348 to Boston is cancelled.")

(define (announce trainnum destination TrainStatus)
  (cond
    [(integer? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is "
                                           (number->string TrainStatus) " minute away.")] ; ASK TA IF WE NEED TO MAKE SEPARATE FUNCTION TO DIFFERENTIATE BETWEEN MINUTE AND MINUTES
    [(string? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is "
                                          TrainStatus ".")]
    [(delay? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is"
                                         " delayed " (number->string (delay-minutes TrainStatus))
                                         " minutes due to "
                                         (delay-reason TrainStatus) ".")]))

; Exercise 4:

(define-struct red [ticks-left])
(define-struct blue [ticks-left])
 
; A ReflexGameState (RGS) is one of:
; - (make-red Nat)
; - (make-blue Nat)
; and represents the current state of the game,
; either red or blue, and how many ticks are left
; to show in that state before switching to the other
(define RGS-1 (make-red 154))
(define RGS-2 (make-blue 14))

(define (red-temp RGS)
  (...(red-ticks-left RGS)...))

(define (blue-temp RGS)
  (...(blue-ticks-left RGS)...))
  

;Design the function reflexes that 
;The input to reflexes can be ignored (and given the Any type), but the output should be a Boolean
;indicating whether or not the user exited the program during a blue screen.

;reflexes : Any -> Boolean
;shows a red screen for 140 ticks and then shows a blue screen for 14 ticks and
;repeats until the user ends the program (by pressing any key).

(define (reflexes Any)
  (big-bang Any
    [to-draw reflex-screens]
    [on-tick change-rgs]
    [stop-when keypress]))


; reflex-screens : RGS -> Image
; creates red and blue screens based on the ReflexGameState

(check-expect (reflex-screens RGS-1) (square 500 "solid" "red"))
(check-expect (reflex-screens RGS-2) (square 500 "solid" "blue"))

(define (reflex-screens rgs)
  (cond
    [(> rgs 14) (square 500 "solid" "red")]
    [(<= rgs 14) (square 500 "solid" "blue")]))

; change-rgs : TickEvent RGS -> RGS
; Changes the RGS based on the number of ticks. 
(check-expect (change-rgs RGS-1) 153)
(check-expect (change-rgs RGS-2) 13)

(define (change-rgs rgs)
  (cond
    [(zero? rgs) 154]
    [(positive? rgs) (- rgs 1)]))

; keypress : KeyEvent -> Boolean                                                                ; CHECK SIGNATURE WITH TA
; Stops program when any key is pressed

(check-expect (keypress RGS-1 key) false)
(check-expect (keypress RGS-2 key) true)

(define (keypress rgs key)
  (cond
    [(> rgs 14) false]
    [(<= rgs 14) true]))


; Exercise 5
; A Posn is a (make-posn Number Number)
; and represents a 2D position

(define POSN-1 (make-posn 3 4))
(define POSN-2 (make-posn 30 40))
(define POSN-3 (make-posn 81 17))

(define-struct circ [radius center])
(define-struct sq [side center])
 
; A Shape is one of...
; - (make-circ PosNumber Posn)
; - (make-sq PosNumber Posn)
; and represents a cirle with a radius and center
; or a square with side length and center

(define CIRCLE-1 (make-circ 30 POSN-1))
(define CIRCLE-2 (make-circ 75 POSN-2))
(define CIRCLE-3 (make-circ 62 POSN-3))

(define (circ-temp circ)
  (... (circ-radius circ) ... (circ-center circ) ...))

(define SQUARE-1 (make-sq 30 POSN-1))
(define SQUARE-2 (make-sq 75 POSN-2))
(define SQUARE-3 (make-sq 62 POSN-3))

(define (sq-temp sq)
  (... (sq-side sq) ... (sq-center sq) ...))
















