; Homework 4 - Liam Knowles and Sophia Thomas 

(require 2htdp/image)
(require 2htdp/universe)

;Exercise 1:
;Design the data necessary to represent a line in mathematics, which has no beginning and no end.
;We will consider two forms: slope-intercept (where we specify two constants, m and b,
;such that y = mx + b)
;and a vertical line (where we specify one constant, which is the x location of the line).

(define-struct lines [M B])

;A Line is one of:
; a (make-line M B)
; vertical line (X)

(define M 2)
(define M2 3)
(define B 1)
(define B2 2)
(define X 3)
(define X2 7)

(define LINE1 (make-lines M B))
(define LINE2 (make-lines M2 B2))
(define LINE3 X2)


(define (make-lines-temp line)
  (...
   (cond
     [(lines? line) (lines-M line)...(lines-B line)... ]
     [(integer? line) line])))


;Exercise 2: Consider the following data definition, inspired by the game Barrel of Monkeys:

#;(define-struct monkey [name c others])
; A MonkeyChain is a (make-monkey String String MonkeyChain)
; and represents a collection of monkeys where:
; - name is the name of this monkey
; - c is the color of this monkey
; - others is the other monkeys it is attached to
; What is the problem with this data definition? Describe your answer in a comment.
;(Hint: try defining examples of a MonkeyChain.)

; The data definition for MonkeyChain contradicts itself because it define MonkeyChain as a
; make-monkey with a parameter of MonkeyChain and the other monkeys it is attached to.



; Exercise 3

(define-struct delay [reason minutes])
; A TrainStatus is one of:
; - Integer
; - String
; - (make-delay String PosInt)
; - false
; and represents number of minutes away, a status message (e.g., "arriving"),
; minutes of delay and reason, or that the train has been cancelled

(define TRAINSTATUS1 4)
(define TRAINSTATUS2 "arriving")
(define TRAINSTATUS3 (make-delay "due to signaling error" 10))
(define TRAINSTATUS4 false)

(define (delay-temp delay)
  (...(delay-reason delay)...(delay-minutes delay)...))

; announce : Number String TrainStatus --> String
; outputs an announcement for the train.

(check-expect (announce 9 "Portland" 1) "Train 9 to Portland is 1 minute away.")
(check-expect (announce 123 "Newark" "arriving") "Train 123 to Newark is arriving.")
(check-expect (announce 82 "Philadelphia" "boarding") "Train 82 to Philadelphia is boarding.")
(check-expect (announce 76 "Chicago" (make-delay "signaling error" 10))
              "Train 76 to Chicago is delayed 10 minutes due to signaling error.")
(check-expect (announce 9348 "Boston" "cancelled") "Train 9348 to Boston is cancelled.")

(define (announce trainnum destination TrainStatus)
  (cond
    [(integer? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is "
                                           (number->string TrainStatus) " minute away.")] ; ASK TA IF WE NEED TO MAKE SEPARATE FUNCTION TO DIFFERENTIATE BETWEEN MINUTE AND MINUTES
    [(string? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is "
                                          TrainStatus ".")]
    [(delay? TrainStatus) (string-append "Train " (number->string trainnum) " to " destination " is"
                                         " delayed " (number->string (delay-minutes TrainStatus))
                                         " minutes due to "
                                         (delay-reason TrainStatus) ".")]))


; Exercise 4:

(define-struct red [ticks-left])
(define-struct blue [ticks-left])
 
; A ReflexGameState (RGS) is one of:
; - (make-red Nat)
; - (make-blue Nat)
; and represents the current state of the game,
; either red or blue, and how many ticks are left
; to show in that state before switching to the other

(define RGS-1 (make-red 154))
(define RGS-2 (make-blue 14))

(define (red-temp RGS)
  (... (red-ticks-left RGS) ...))

(define (blue-temp RGS)
  (... (blue-ticks-left RGS) ...))


(define-struct game [rgs bool])

; A Game is a (make-game RGS Bool)
; and represents the current state of the game,
; while also giving a boolean representation of whether or not
; a key has been pressed

(define GAME-1 (make-game RGS-1 true))
(define GAME-2 (make-game RGS-2 true))
(define GAME-3 (make-game RGS-2 false))

(define (game-temp g)
  (... (game-rgs g) ...
       (game-bool g) ...)) 

;reflexes : Any -> Boolean
;shows a red screen for 140 ticks and then shows a blue screen for 14 ticks and
;repeats until the user ends the program (by pressing any key).

(define (reflexes g)
  (blue?
   (game-rgs
    (big-bang g
      [to-draw reflex-screens]
      [on-tick change-rgs]
      [on-key key-pressed]
      [stop-when bool-stop]))))

; reflex-screens : RGS -> Image
; creates red and blue screens based on the ReflexGameState
(check-expect (reflex-screens GAME-1) (square 500 "solid" "red"))
(check-expect (reflex-screens GAME-2) (square 500 "solid" "blue"))

(define (reflex-screens g)
  (cond
    [(red? (game-rgs g)) (square 500 "solid" "red")] 
    [(blue? (game-rgs g)) (square 500 "solid" "blue")]))


; change-rgs : TickEvent RGS -> RGS
; Changes the RGS based on the number of ticks. 
(check-expect (change-rgs GAME-1) (red-help GAME-1))
(check-expect (change-rgs GAME-2) (blue-help GAME-2))

(define (change-rgs g)
  (cond 
    [(red? (game-rgs g)) (red-help g)]
    [(blue? (game-rgs g)) (blue-help g)]))
   
   
; blue-help : ReflexGameState -> Game
; changes the ReflexGameState to red if the number of ticks is above or equal 14 and subtracts 1 from
;the ticks
(check-expect (blue-help GAME-2) (make-game (make-blue 13) true))

(define (blue-help g)
  (cond
    [(zero? (blue-ticks-left (game-rgs g))) (make-game (make-red 154) (game-bool g))]
    [(<= (blue-ticks-left (game-rgs g)) 14)
     (make-game (make-blue (sub1 (blue-ticks-left (game-rgs g))))(game-bool g))]))     

; red-help : ReflexGameState -> ReflexGameState
; changes the ReflexGameState to red if the number of ticks is above or equal 14 and subtracts 1 from
;the ticks 
(check-expect (red-help GAME-1) (make-game (make-red 153) true))                            

(define (red-help g)
  (cond
    [(> (red-ticks-left (game-rgs g)) 14)
     (make-game (make-red (sub1 (red-ticks-left (game-rgs g))))(game-bool g))]
    [(<= (red-ticks-left (game-rgs g)) 14)
     (make-game (make-blue (sub1 (red-ticks-left (game-rgs g))))(game-bool g))])) 


(define REDEND "red")
(define BLUEEND "blue") 

; key-pressed : Game KeyEvent -> Boolean                                            
; Stops program when any key is pressed, outputs true if ends on blue screen and false if red screen
;check-expect for key-press?

(define (key-pressed g key)
  (if (key-event? key) (make-game (game-rgs g) (not (game-bool g))) g))

; bool-stop : Game -> Boolean                                            
; Stops program when any key is pressed, outputs true if ends on blue screen and false if red screen
(check-expect (bool-stop GAME-1) false)
(check-expect (bool-stop GAME-2) false)
(define (bool-stop g)
  (boolean=? (game-bool g) false))


; Exercise 5

; A Posn is a (make-posn Number Number)
; Interpretation: represents a 2D position
(define POSN-0 (make-posn 200 200))
(define POSN-1 (make-posn 175 175))
(define POSN-2 (make-posn 150 150))
(define POSN-3 (make-posn 150 250))

(define-struct circ [radius center])
; a Circle is a (make-circ PosNumber Posn)
; - radius is a positive number representing the radius of a circle
; - center is a Posn representing the center as an order pair (posn-x, posn-y)
;; Interpretation: a circle with a radius and a center.
(define CIRC-0 (make-circ 30 POSN-0))
(define CIRC-1 (make-circ 50 POSN-1))

; circ-temp : Circle -> ???
#;(define (circ-temp circ)
  (... (circ-radius circ)
       (circ-center circ)...))


(define-struct sq [side center])
; a Square is a (make-sq PosNumber Posn)
; - side represents the length of the side of a square
; - center is a Posn representing the center as an order pair (posn-x, posn-y)
;; Interpretation: a square with a side length and a center.
(define SQ-0 (make-sq 40 POSN-2))
(define SQ-1 (make-sq 50 POSN-3))

; sq-temp : Square -> ???
#;(define (sq-temp sq)
  (... (sq-side sq)
       (sq-center sq)...))

; A Shape is one of...
; - (make-circ PosNumber Posn)
; - (make-sq PosNumber Posn)
; and represents a circle with a radius and center
; or a square with side length and center
;; Interpretation: A shape that is either a circle or a square.
(define SHAPE-0 CIRC-0)
(define SHAPE-1 CIRC-1)
(define SHAPE-2 SQ-0)
(define SHAPE-3 SQ-1)

; shape-temp : Shape -> ???
#;(define (shape-temp s)
  (cond
    [(circ? s) (circ-temp s)]
    [(sq? s)   (sq-temp s)])) 

(define-struct shapestate [shape filled])
; A ShapeState is a (make-shape-state Shape Boolean)
; and represents whether a shape is outlined or solid
; - shape is a Shape
; - filled is a Boolean which if True means a shape is filled,
; if false it is just an outline
;; Interpretation: The state of a shape, given as which shape it is and if it is outlined or filled.
(define SHAPE-STATE-1 (make-shapestate SHAPE-1 true))
(define SHAPE-STATE-2 (make-shapestate SHAPE-1 false))
(define SHAPE-STATE-3 (make-shapestate SHAPE-2 true))
(define SHAPE-STATE-4 (make-shapestate SHAPE-2 false))

; shapestate-temp : ShapeState -> ???
#;(define (shapestate-temp ss)
  (... (shape-temp (shapestate-shape ss)) ... (shapestate-filled ss) ...))

; blink : ShapeState -> Posn
; returns the center posn of the shape that is being animated
(check-expect (blink SHAPE-STATE-1)
              (circ-center
               (shapestate-shape
                (blink-helper
                 (make-shapestate
                  (make-circ
                   (circ-radius (shapestate-shape SHAPE-STATE-1))
                   (make-posn 175 175))false)))))

(check-expect (blink SHAPE-STATE-3)
              (sq-center
               (shapestate-shape
                (blink-helper
                 (make-shapestate
                  (make-sq
                   (sq-side (shapestate-shape SHAPE-STATE-3))
                   (make-posn 150 150))false)))))
 
(define (blink ss)
  (if (circ? (shapestate-shape ss)) (circ-center (shapestate-shape (blink-helper ss)))
      (sq-center (shapestate-shape (blink-helper ss)))))

; blink-helper : ShapeState -> ShapeState
; animates a shape state that can move on an empty screen
(define (blink-helper ss)
  (big-bang ss
    [to-draw draw-scene]
    [on-mouse change-shape]))

; draw-scene : ShapeState -> Image
; creates an image given a shape state
(check-expect (draw-scene SHAPE-STATE-1)
              (place-image (circle 50 "solid" "purple") 175 175 (empty-scene 300 300)))
(check-expect (draw-scene SHAPE-STATE-2)
              (place-image (circle 50 "outline" "purple") 175 175 (empty-scene 300 300)))
(check-expect (draw-scene SHAPE-STATE-3)
              (place-image (square 40 "solid" "purple") 150 150 (empty-scene 300 300)))
(check-expect (draw-scene SHAPE-STATE-4)
              (place-image (square 40 "outline" "purple") 150 150 (empty-scene 300 300)))
(define (draw-scene ss)
  (cond
    [(and (circ? (shapestate-shape ss)) (shapestate-filled ss))
     (place-image (circle (circ-radius (shapestate-shape ss)) "solid" "purple")
                  (posn-x(circ-center (shapestate-shape ss)))
                  (posn-y(circ-center (shapestate-shape ss)))
                  (empty-scene 300 300))]
    [(and (sq? (shapestate-shape ss)) (shapestate-filled ss))
     (place-image (square (sq-side (shapestate-shape ss)) "solid" "purple")
                  (posn-x(sq-center (shapestate-shape ss)))
                  (posn-y(sq-center (shapestate-shape ss)))
                  (empty-scene 300 300))]
    [(and (circ? (shapestate-shape ss)) (not (shapestate-filled ss)))
     (place-image (circle (circ-radius (shapestate-shape ss)) "outline" "purple")
                  (posn-x(circ-center (shapestate-shape ss)))
                  (posn-y(circ-center (shapestate-shape ss)))
                  (empty-scene 300 300))]
    [(and (sq? (shapestate-shape ss)) (not (shapestate-filled ss)))
     (place-image (square (sq-side (shapestate-shape ss)) "outline" "purple")
                  (posn-x(sq-center (shapestate-shape ss)))
                  (posn-y(sq-center (shapestate-shape ss)))
                  (empty-scene 300 300))]))
   
; change-shape : ShapeState Num Num MouseEvent -> ShapeState
;; Changes the ShapeState on a MouseEvent
(check-expect (change-shape SHAPE-STATE-1 1 1 "button-down")
              (make-shapestate
               (make-circ
                (circ-radius (shapestate-shape SHAPE-STATE-1))
                (make-posn 1 1))
               true))
(check-expect (change-shape SHAPE-STATE-1 200 200 "button-down")
              (make-shapestate
               (make-circ
                (circ-radius (shapestate-shape SHAPE-STATE-1))
                (make-posn 175 175))
               false))

(check-expect (change-shape SHAPE-STATE-3 1 1 "button-down")
              (make-shapestate
               (make-sq
                (sq-side (shapestate-shape SHAPE-STATE-3))
                (make-posn 1 1))
               true))
(check-expect (change-shape SHAPE-STATE-3 100 100 "button-down")
              (make-shapestate
               (make-sq
                (sq-side (shapestate-shape SHAPE-STATE-3))
                (make-posn 100 100))
               true))
(check-expect (change-shape SHAPE-STATE-3 0 0 "") SHAPE-STATE-3)

(define (change-shape ss x y me)
  (cond
    [(and (string=? me "button-down")
          (circ? (shapestate-shape ss)) (in-circ? x y (shapestate-shape ss)))
     (make-shapestate (make-circ (circ-radius (shapestate-shape ss))
                                 (circ-center (shapestate-shape ss)))
                      (not(shapestate-filled ss)))]
    [(and (string=? me "button-down")
          (circ? (shapestate-shape ss)) (not (in-circ? x y (shapestate-shape ss))))
     (make-shapestate (make-circ (circ-radius (shapestate-shape ss))
                                 (make-posn x y))
                      (shapestate-filled ss))]
    [(and (string=? me "button-down")
          (sq? (shapestate-shape ss)) (in-sq? x y (shapestate-shape ss)))
     (make-shapestate (make-sq (sq-side (shapestate-shape ss))
                               (sq-center (shapestate-shape ss)))
                      (not (shapestate-filled ss)))]
    [(and (string=? me "button-down")
          (sq? (shapestate-shape ss)) (not (in-sq? x y (shapestate-shape ss))))
     (make-shapestate (make-sq (sq-side (shapestate-shape ss))
                               (make-posn x y))
                      (shapestate-filled ss))]
    [else ss]))

; in-circ? : Num Num Circle -> Boolean
; Checks if the coordinates are in the circle
(check-expect (in-circ? 0 0 CIRC-0) false)
(check-expect (in-circ? 150 150 CIRC-0) false)
(define (in-circ? x y c)
  (< (sqrt (+ (sqr (- x (posn-x (circ-center c))))
              (sqr (- y (posn-y (circ-center c))))))
     (circ-radius c)))
                     
; in-sq? : Num Num Square -> Boolean
; Checks if the coordinates are in the square
(check-expect (in-sq? 0 0 SQ-0) false)
(check-expect (in-sq? 95 95 SQ-0) false)
(define (in-sq? x y s)
  (and (< (abs (- x (posn-x (sq-center s)))) (/ (sq-side s) 2))
       (< (abs (- y (posn-y (sq-center s)))) (/ (sq-side s) 2))))



; Exercise 6

(define-struct building [width height color right])

; A Skyline is one of:
; - false
; - (make-building PosInteger PosInteger String Skyline)
; and represents either an empty skyline or a building with
; a width and height in pixels, the color of the building, and the
; rest of the skyline to the right of the building
;; Interpretation: A skyline that could be empty or could be comprised of building(s).

(define SKYLINE-1 false)
(define BUILDING-1 (make-building 20 20 "red" SKYLINE-1))
(define SKYLINE-2 BUILDING-1)
(define BUILDING-2 (make-building 30 30 "pink" SKYLINE-2))
(define SKYLINE-3 BUILDING-2)
(define BUILDING-3 (make-building 25 60 "purple" SKYLINE-3))
(define SKYLINE-4 BUILDING-3)
(define BUILDING-4 (make-building 25 60 "red" SKYLINE-4))
(define SKYLINE-5 BUILDING-4)

; building-temp : Building -> ???
#;(define (building-temp b)
  (... (building-width b)
       (building-height b)
       (building-color b)
       (skyline-temp (building-right b)) ...))

; skyline-temp : Skyline -> ???
#;(define (skyline-temp s)
  (cond
    [(boolean? s) ...]
    [(building? s) (skyline-temp (building-temp s))]))

;; draw-skyline : Skyline -> Image
;; Draws a skyline
(check-expect (draw-skyline SKYLINE-1) empty-image)
(check-expect (draw-skyline SKYLINE-3)
              (beside/align "bottom"
                            (rectangle (building-width SKYLINE-3)
                                       (building-height SKYLINE-3)
                                       "solid"
                                       (building-color SKYLINE-3))
                            (rectangle (building-width SKYLINE-2)
                                       (building-height SKYLINE-2)
                                       "solid"
                                       (building-color SKYLINE-2))))

                                                     
(define (draw-skyline s)
  (cond
    [(boolean? s) empty-image]
    [(building? s) (beside/align "bottom"
                                 (rectangle (building-width s)
                                            (building-height s)
                                            "solid"
                                            (building-color s))
                                 (draw-skyline (building-right s)))]))

;; square-skyline? : Skyline -> Boolean
;; determines if all the buildings in the skyline are square
(check-expect (square-skyline? SKYLINE-2) true) 
(check-expect (square-skyline? SKYLINE-3) true)
(define (square-skyline? s)
  (cond
    [(boolean? s) true]
    [(building? s) (and (= (building-height s) (building-width s))
                        (square-skyline? (building-right s)))]))


;; doze-red: Skyline -> Skyline
;; removes all the red buildings from a skyline
(check-expect (doze-red SKYLINE-1) false)
(check-expect (doze-red SKYLINE-2) false)
(check-expect (doze-red SKYLINE-3) (make-building 30 30 "pink" false))
(check-expect (doze-red SKYLINE-4) (make-building 25 60 "purple"
                                                  (make-building 30 30 "pink" false)))
(define (doze-red s)
  (cond
    [(boolean? s) s]
    [(and (building? s) (string=? "red" (building-color s)) (building?(building-right s)))
     (make-building (building-width (building-right s))
                    (building-height (building-right s))
                    (building-color (building-right s))
                    (doze-red(building-right (building-right s))))]
    [(and (building? s) (string=? "red" (building-color s)) (boolean? (building-right s))) false]
    [else (make-building (building-width s)
                         (building-height s)
                         (building-color s) 
                         (doze-red(building-right s)))]))

;; grow : Skyline PosNumber -> Skyline
;; increase the height of each building by a positive number
(check-expect (grow SKYLINE-1 40) false)
(check-expect (grow SKYLINE-2 30) (make-building 20 50 "red" false))

(define (grow s h)
  (cond
    [(boolean? s) s]
    [(building? s) (make-building (building-width s)
                                  (+ h (building-height s))
                                  (building-color s)
                                  (grow (building-right s) h))]))

;; skyline-height : Skyline -> NonNegInteger
;; returns the height of the tallest building in the skyline
(check-expect (skyline-height SKYLINE-1) 0)
(check-expect (skyline-height SKYLINE-3) 30)

(define (skyline-height s)
  (cond
    [(boolean? s) 0]
    [(building? s) (max (building-height s) (skyline-height (building-right s)))]))
 
 
; Exercise 7:
; A planetary system has some number of planets, each with a name, distance from the host star
; (in astronomical units), and some number of moons, each of which has a relative ordering in distance
; from the planet and a mass (in 1016 kg). Design the function bigger-moon?, which determines if any
; planet in a system has a moon whose mass is greater than a supplied value.

(define-struct moon [order mass])

(define MOON-1 (make-moon 1 5000))
(define MOON-2 (make-moon 1 1000))
(define MOON-3 (make-moon 2 3050))

; a List of Moons (LoM) is one of
; - empty
; (cons Moon LoM)
; Intepretation: Represents a list of moons that orbit the same planet

(define LOM-0 empty)
(define LOM-1 (cons MOON-1 LOM-0))
 
(define (moon-temp moon)
  (... (moon-order moon) ...
       (moon-mass moon) ...))


(define-struct planet [name distance moon])

(define PLANET-1 (make-planet "Earth" 960000000 LOM-1))
(define PLANET-2 (make-planet "Mars" 129000000 LOM-1))

(define SYSTEM-0 empty)
(define SYSTEM-1 (cons PLANET-1 SYSTEM-0))
; a List of Planets (LoP) is one of
; - empty
; (cons Planet LoP)
; Intepretation: Represents a list of planets

(define (planet-temp planet)
  (... (planet-name planet) ...
       (planet-distance planet) ...
       (planet-moon planet) ...))



; bigger-moon? : System Mass -> Boolean
; accesses the lists created by planet and moon and checks if they are empty
(check-expect (bigger-moon? SYSTEM-1 6000) false)
(check-expect (bigger-moon? SYSTEM-1 2000) true)

(define (bigger-moon? system num)
  (cond
    [(empty? system) false]
    [(cons? system) (if (list-moons (planet-moon (first system)) num)
                        true (bigger-moon? (rest system) num))]
    ))


; list-moons : List Number -> Boolean
; Checks if the moon mass is greater than the supplied value
(check-expect (list-moons LOM-0 35) false)
(check-expect (list-moons LOM-1 7000) false)
(define (list-moons lom num)
  (cond
    [(empty? lom) false]
    [(cons? lom) (if (> (moon-mass (first lom)) num)
                     true (list-moons (rest lom) num))]))
